/**
 * Committed Chart Factory
 *
 * Creates chart definitions in committed transactions that are visible to services
 * using the global db connection.
 *
 * This factory:
 * - Generates cryptographically unique test chart IDs
 * - Creates charts visible to all database connections
 * - Tracks charts for automatic cleanup
 * - Supports bulk chart creation
 * - Automatically tracks user dependencies
 */

import { chart_definitions } from '@/lib/db/schema'
import { inArray } from 'drizzle-orm'
import {
  BaseFactory,
  defaultIDGenerator,
  defaultCleanupTracker,
  type BaseFactoryOptions
} from '../base'
import type { InferSelectModel } from 'drizzle-orm'

/**
 * Chart data type from database schema
 */
export type CommittedChart = InferSelectModel<typeof chart_definitions>

/**
 * Options for creating a test chart
 */
export interface CreateChartOptions extends BaseFactoryOptions {
  /**
   * Chart name
   * If not provided, a unique name will be generated
   */
  chart_name?: string

  /**
   * Chart description
   */
  chart_description?: string

  /**
   * Chart type (line, bar, pie, etc.)
   * Defaults to 'line'
   */
  chart_type?: string

  /**
   * Data source configuration as JSON
   * Defaults to minimal test configuration
   */
  data_source?: Record<string, unknown>

  /**
   * Chart configuration as JSON
   * Defaults to minimal test configuration
   */
  chart_config?: Record<string, unknown>

  /**
   * Access control configuration
   */
  access_control?: Record<string, unknown>

  /**
   * Chart category ID
   */
  chart_category_id?: number

  /**
   * Whether the chart is active
   * Defaults to true
   */
  is_active?: boolean

  /**
   * User ID who creates the chart (REQUIRED)
   * Must be a valid user ID (can use createCommittedUser to create one)
   */
  created_by: string
}

/**
 * Chart Factory
 *
 * Creates test charts in committed transactions.
 *
 * @example
 * ```typescript
 * const factory = new CommittedChartFactory()
 *
 * // Create a user first (charts require a creator)
 * const user = await createCommittedUser({ scope: 'my-test' })
 *
 * // Create a chart
 * const { data: chart } = await factory.create({
 *   chart_name: 'My Chart',
 *   chart_type: 'bar',
 *   created_by: user.user_id,
 *   scope: 'my-test'
 * })
 *
 * // Create multiple charts
 * const charts = await factory.createMany(5, {
 *   created_by: user.user_id,
 *   scope: 'my-test'
 * })
 *
 * // Cleanup
 * await factory.cleanup('my-test')
 * ```
 */
export class CommittedChartFactory extends BaseFactory<CommittedChart, CreateChartOptions> {
  protected readonly entityType = 'chart' as const

  /**
   * Override extractId to handle chart_definition_id field
   */
  protected extractId(data: CommittedChart): string {
    if (data.chart_definition_id) {
      return data.chart_definition_id
    }
    throw new Error('Could not extract chart_definition_id from chart')
  }

  /**
   * Create a chart in the database
   * Database will generate chart_definition_id UUID automatically
   */
  protected async createInDatabase(
    options: CreateChartOptions
  ): Promise<CommittedChart> {
    if (!options.created_by) {
      throw new Error(
        'created_by is required for chart creation. ' +
        'Use createCommittedUser() to create a user first.'
      )
    }

    // Generate unique chart name if not provided
    const chartName = options.chart_name || this.generateTestName('Chart')

    const chartData = {
      // chart_definition_id will be generated by database (defaultRandom())
      chart_name: chartName,
      chart_description: options.chart_description ?? undefined,
      chart_type: options.chart_type || 'line',
      data_source: options.data_source || { type: 'query', query: 'SELECT 1' },
      chart_config: options.chart_config || {
        xAxis: { type: 'category' },
        yAxis: { type: 'value' },
        series: []
      },
      access_control: options.access_control ?? undefined,
      chart_category_id: options.chart_category_id ?? undefined,
      is_active: options.is_active ?? true,
      created_by: options.created_by
    }

    const [chart] = await this.db
      .insert(chart_definitions)
      .values(chartData)
      .returning()

    if (!chart) {
      throw new Error(`Failed to create test chart`)
    }

    return chart
  }

  /**
   * Clean up charts from the database
   */
  protected async cleanupFromDatabase(ids: string[]): Promise<void> {
    if (ids.length === 0) {
      return
    }

    await this.db
      .delete(chart_definitions)
      .where(inArray(chart_definitions.chart_definition_id, ids))
  }

  /**
   * Track chart dependencies (user who created it)
   */
  protected override trackDependencies(id: string, data: CommittedChart): void {
    // Chart depends on its creator
    if (data.created_by && this.idGenerator.isTestId(data.created_by)) {
      this.cleanupTracker.addDependency(id, data.created_by)
    }

    // Call parent implementation for other standard FK fields
    super.trackDependencies(id, data)
  }

  /**
   * Modify options for batch creation
   * Ensures each chart gets a unique name
   */
  protected override async modifyOptionsForBatch(
    baseOptions: CreateChartOptions,
    index: number,
    total: number
  ): Promise<CreateChartOptions> {
    const name = baseOptions.chart_name
      ? `${baseOptions.chart_name} ${index + 1}`
      : undefined

    return {
      ...baseOptions,
      ...(name ? { chart_name: name } : {})
    }
  }

  /**
   * Validate options before creation
   */
  protected override async beforeCreate(
    options: CreateChartOptions
  ): Promise<CreateChartOptions | void> {
    if (!options.created_by) {
      throw new Error(
        'Chart creation requires created_by field. ' +
        'Create a user first with createCommittedUser().'
      )
    }

    // Ensure created_by is a valid ID format
    if (!options.created_by.startsWith('test_') && process.env.NODE_ENV === 'test') {
      console.warn(
        `Warning: Chart created_by (${options.created_by}) does not look like a test ID. ` +
        `This may cause issues with cleanup.`
      )
    }
  }
}

/**
 * Create a singleton instance for convenience
 */
export const committedChartFactory = new CommittedChartFactory(
  defaultIDGenerator,
  defaultCleanupTracker
)

/**
 * Convenience function to create a chart
 * Uses the singleton factory instance
 *
 * @example
 * ```typescript
 * const user = await createCommittedUser()
 * const chart = await createCommittedChart({
 *   chart_name: 'My Chart',
 *   chart_type: 'bar',
 *   created_by: user.user_id,
 *   scope: 'my-test'
 * })
 * ```
 */
export async function createCommittedChart(
  options: CreateChartOptions
): Promise<CommittedChart> {
  const result = await committedChartFactory.create(options)
  return result.data
}

/**
 * Convenience function to create multiple charts
 * Uses the singleton factory instance
 *
 * @example
 * ```typescript
 * const user = await createCommittedUser()
 * const charts = await createCommittedCharts(5, {
 *   created_by: user.user_id,
 *   scope: 'my-test'
 * })
 * ```
 */
export async function createCommittedCharts(
  count: number,
  options: CreateChartOptions
): Promise<CommittedChart[]> {
  const results = await committedChartFactory.createMany(count, options)
  return results.map(r => r.data)
}

/**
 * Convenience function to cleanup charts
 * Uses the singleton factory instance
 *
 * @example
 * ```typescript
 * await cleanupCommittedCharts('my-test')
 * ```
 */
export async function cleanupCommittedCharts(scope?: string): Promise<number> {
  return await committedChartFactory.cleanup(scope)
}

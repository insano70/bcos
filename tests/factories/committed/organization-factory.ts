/**
 * Committed Organization Factory
 *
 * Creates organizations in committed transactions that are visible to services
 * using the global db connection.
 *
 * This factory:
 * - Generates unique organization names and slugs
 * - Creates organizations visible to all database connections
 * - Tracks organizations for automatic cleanup
 * - Supports bulk organization creation
 */

import type { InferSelectModel } from 'drizzle-orm';
import { inArray } from 'drizzle-orm';
import { nanoid } from 'nanoid';
import { organizations } from '@/lib/db/rbac-schema';
import {
  BaseFactory,
  type BaseFactoryOptions,
  defaultCleanupTracker,
  defaultIDGenerator,
} from '../base';

/**
 * Organization data type from database schema
 */
export type CommittedOrganization = InferSelectModel<typeof organizations>;

/**
 * Options for creating a test organization
 */
export interface CreateOrganizationOptions extends BaseFactoryOptions {
  /**
   * Organization name
   * If not provided, a unique name will be generated
   */
  name?: string;

  /**
   * Organization slug (URL-friendly identifier)
   * If not provided, will be generated from name or uniquely
   */
  slug?: string;

  /**
   * Parent organization ID for hierarchies
   */
  parentOrganizationId?: string;

  /**
   * Whether the organization is active
   * Defaults to true
   */
  isActive?: boolean;
}

/**
 * Organization Factory
 *
 * Creates test organizations in committed transactions.
 *
 * @example
 * ```typescript
 * const factory = new CommittedOrganizationFactory()
 *
 * // Create a single organization
 * const { data: org } = await factory.create({
 *   name: 'Test Org',
 *   slug: 'test-org'
 * })
 *
 * // Create multiple organizations
 * const orgs = await factory.createMany(5, {
 *   scope: 'my-test'
 * })
 *
 * // Cleanup
 * await factory.cleanup('my-test')
 * ```
 */
export class CommittedOrganizationFactory extends BaseFactory<
  CommittedOrganization,
  CreateOrganizationOptions
> {
  protected readonly entityType = 'organization' as const;

  /**
   * Create an organization in the database
   * Database will generate organization_id UUID automatically
   */
  protected async createInDatabase(
    options: CreateOrganizationOptions
  ): Promise<CommittedOrganization> {
    // Generate unique name and slug if not provided
    const uniqueId = nanoid(8);
    const name = options.name || `test_org_${uniqueId}`;
    const slug = options.slug || `test-org-${uniqueId}`;

    const orgData = {
      // organization_id will be generated by database (defaultRandom())
      name,
      slug,
      parent_organization_id: options.parentOrganizationId || null,
      is_active: options.isActive ?? true,
    };

    const [org] = await this.db.insert(organizations).values(orgData).returning();

    if (!org) {
      throw new Error('Failed to create test organization');
    }

    return org;
  }

  /**
   * Clean up organizations from the database
   */
  protected async cleanupFromDatabase(ids: string[]): Promise<void> {
    if (ids.length === 0) {
      return;
    }

    await this.db.delete(organizations).where(inArray(organizations.organization_id, ids));
  }

  /**
   * Modify options for batch creation
   * Ensures each organization gets a unique name and slug
   */
  protected override async modifyOptionsForBatch(
    baseOptions: CreateOrganizationOptions,
    index: number,
    _total: number
  ): Promise<CreateOrganizationOptions> {
    const uniqueId = nanoid(8);
    const baseName = baseOptions.name || 'test_org';
    const baseSlug = baseOptions.slug || 'test-org';

    return {
      ...baseOptions,
      name: `${baseName}_${index}_${uniqueId}`,
      slug: `${baseSlug}-${index}-${uniqueId}`,
    };
  }
}

/**
 * Create a singleton instance for convenience
 */
export const committedOrganizationFactory = new CommittedOrganizationFactory(
  defaultIDGenerator,
  defaultCleanupTracker
);

/**
 * Convenience function to create an organization
 * Uses the singleton factory instance
 *
 * @example
 * ```typescript
 * const org = await createCommittedOrganization({
 *   name: 'Test Org',
 *   scope: 'my-test'
 * })
 * ```
 */
export async function createCommittedOrganization(
  options: CreateOrganizationOptions = {}
): Promise<CommittedOrganization> {
  const result = await committedOrganizationFactory.create(options);
  return result.data;
}

/**
 * Convenience function to create multiple organizations
 * Uses the singleton factory instance
 *
 * @example
 * ```typescript
 * const orgs = await createCommittedOrganizations(5, {
 *   scope: 'my-test'
 * })
 * ```
 */
export async function createCommittedOrganizations(
  count: number,
  options: CreateOrganizationOptions = {}
): Promise<CommittedOrganization[]> {
  const results = await committedOrganizationFactory.createMany(count, options);
  return results.map((r) => r.data);
}

/**
 * Convenience function to cleanup organizations
 * Uses the singleton factory instance
 *
 * @example
 * ```typescript
 * await cleanupCommittedOrganizations('my-test')
 * ```
 */
export async function cleanupCommittedOrganizations(scope?: string): Promise<number> {
  return await committedOrganizationFactory.cleanup(scope);
}

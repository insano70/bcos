-- RBAC Seed Data for Healthcare Practice Management System
-- Creates only 2 roles: super_admin (all permissions) and user (own permissions)
-- Creates admin@bendcare.com as super_admin and assigns user role to other test users

-- Insert base permissions (handle duplicates)
INSERT INTO public.permissions (name, description, resource, action, scope, is_active) VALUES
-- User Management Permissions
('users:read:own', 'Read own user profile', 'users', 'read', 'own', true),
('users:update:own', 'Update own user profile', 'users', 'update', 'own', true),
('users:read:organization', 'Read users in organization', 'users', 'read', 'organization', true),
('users:create:organization', 'Create users in organization', 'users', 'create', 'organization', true),
('users:update:organization', 'Update users in organization', 'users', 'update', 'organization', true),
('users:delete:organization', 'Delete users in organization', 'users', 'delete', 'organization', true),
('users:read:all', 'Read all users (super admin)', 'users', 'read', 'all', true),
('users:manage:all', 'Full user management (super admin)', 'users', 'manage', 'all', true),

-- Practice/Organization Management Permissions
('practices:read:own', 'Read own practice information', 'practices', 'read', 'own', true),
('practices:update:own', 'Update own practice information', 'practices', 'update', 'own', true),
('practices:staff:manage:own', 'Manage practice staff', 'practices', 'staff:manage', 'own', true),
('practices:create:all', 'Create new practices (super admin)', 'practices', 'create', 'all', true),
('practices:read:all', 'Read all practices (super admin)', 'practices', 'read', 'all', true),
('practices:manage:all', 'Full practice management (super admin)', 'practices', 'manage', 'all', true),

-- Analytics & Reporting Permissions
('analytics:read:organization', 'View organization analytics', 'analytics', 'read', 'organization', true),
('analytics:export:organization', 'Export organization reports', 'analytics', 'export', 'organization', true),
('analytics:read:all', 'View all analytics (super admin)', 'analytics', 'read', 'all', true),

-- Role Management Permissions
('roles:read:organization', 'Read roles in organization', 'roles', 'read', 'organization', true),
('roles:create:organization', 'Create roles in organization', 'roles', 'create', 'organization', true),
('roles:update:organization', 'Update roles in organization', 'roles', 'update', 'organization', true),
('roles:delete:organization', 'Delete roles in organization', 'roles', 'delete', 'organization', true),
('roles:manage:all', 'Full role management (super admin)', 'roles', 'manage', 'all', true),

-- Settings & Configuration Permissions
('settings:read:organization', 'Read organization settings', 'settings', 'read', 'organization', true),
('settings:update:organization', 'Update organization settings', 'settings', 'update', 'organization', true),
('settings:read:all', 'Read all system settings', 'settings', 'read', 'all', true),
('settings:update:all', 'Update all system settings', 'settings', 'update', 'all', true),

-- Template Management Permissions
('templates:read:organization', 'Read available templates', 'templates', 'read', 'organization', true),
('templates:manage:all', 'Full template management (super admin)', 'templates', 'manage', 'all', true),

-- API Access Permissions
('api:read:organization', 'Read API access for organization', 'api', 'read', 'organization', true),
('api:write:organization', 'Write API access for organization', 'api', 'write', 'organization', true)
ON CONFLICT (name) DO UPDATE SET
  description = EXCLUDED.description,
  resource = EXCLUDED.resource,
  action = EXCLUDED.action,
  scope = EXCLUDED.scope,
  is_active = EXCLUDED.is_active,
  updated_at = NOW();

-- Insert only TWO roles: super_admin and user  
-- Use ON CONFLICT to handle duplicates - using correct schema with is_system_role
-- Both are system roles since they are standard roles generated by the system
INSERT INTO public.roles (name, description, is_system_role, is_active) VALUES
('super_admin', 'Super administrator with full system access', true, true),
('user', 'Basic user with own resource access', true, true)
ON CONFLICT (name) DO UPDATE SET
  description = EXCLUDED.description,
  is_system_role = EXCLUDED.is_system_role,
  is_active = EXCLUDED.is_active,
  updated_at = NOW();

-- Insert sample organizations (handle duplicates)
INSERT INTO public.organizations (name, slug, is_active) VALUES
('Platform Administration', 'platform-admin', true),
('Rheumatology Associates', 'rheumatology-associates', true),
('Joint Care Specialists', 'joint-care-specialists', true)
ON CONFLICT (slug) DO UPDATE SET
  name = EXCLUDED.name,
  is_active = EXCLUDED.is_active,
  updated_at = NOW();

-- SUPER_ADMIN: Assign ALL permissions dynamically (*) - handle duplicates
INSERT INTO role_permissions (role_id, permission_id)
SELECT r.role_id, p.permission_id
FROM roles r
CROSS JOIN permissions p
WHERE r.name = 'super_admin'
  AND NOT EXISTS (
    SELECT 1 FROM role_permissions rp2 
    WHERE rp2.role_id = r.role_id 
    AND rp2.permission_id = p.permission_id
  );

-- USER: Assign all permissions with scope 'own' dynamically - handle duplicates
INSERT INTO role_permissions (role_id, permission_id)
SELECT r.role_id, p.permission_id
FROM roles r
JOIN permissions p ON p.scope = 'own'
WHERE r.name = 'user'
  AND NOT EXISTS (
    SELECT 1 FROM role_permissions rp2 
    WHERE rp2.role_id = r.role_id 
    AND rp2.permission_id = p.permission_id
  );

-- Create super_admin user: admin@bendcare.com (handle duplicates)
INSERT INTO public.users (
  email,
  password_hash,
  first_name,
  last_name,
  email_verified,
  is_active,
  created_at,
  updated_at
) VALUES (
  'admin@bendcare.com',
  '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeCt1uSk8pyyOjQK', -- admin123!
  'Super',
  'Admin',
  true,
  true,
  NOW(),
  NOW()
)
ON CONFLICT (email) DO UPDATE SET
  password_hash = EXCLUDED.password_hash,
  first_name = EXCLUDED.first_name,
  last_name = EXCLUDED.last_name,
  email_verified = EXCLUDED.email_verified,
  is_active = EXCLUDED.is_active,
  updated_at = NOW();

-- Assign super_admin role to admin@bendcare.com (handle duplicates)
INSERT INTO public.user_roles (user_id, role_id, organization_id, granted_by, is_active, granted_at)
SELECT 
  (SELECT user_id FROM users WHERE email = 'admin@bendcare.com' LIMIT 1),
  (SELECT role_id FROM roles WHERE name = 'super_admin' LIMIT 1),
  NULL, -- System-wide role
  (SELECT user_id FROM users WHERE email = 'admin@bendcare.com' LIMIT 1),
  true,
  NOW()
WHERE NOT EXISTS (
  SELECT 1 FROM user_roles ur
  WHERE ur.user_id = (SELECT user_id FROM users WHERE email = 'admin@bendcare.com' LIMIT 1)
    AND ur.role_id = (SELECT role_id FROM roles WHERE name = 'super_admin' LIMIT 1)
    AND ur.organization_id IS NULL
);

-- Create sample users with 'user' role (handle duplicates)
INSERT INTO public.users (
  email,
  password_hash,
  first_name,
  last_name,
  email_verified,
  is_active,
  created_at,
  updated_at
) VALUES
  ('john.doe@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeCt1uSk8pyyOjQK', 'John', 'Doe', true, true, NOW(), NOW()),
  ('jane.smith@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeCt1uSk8pyyOjQK', 'Jane', 'Smith', false, true, NOW(), NOW()),
  ('bob.johnson@example.com', '$2b$12$LQv3c1yqBWVHxkd0LHAkCOYz6TtxMQJqhN8/LeCt1uSk8pyyOjQK', 'Bob', 'Johnson', true, false, NOW(), NOW())
ON CONFLICT (email) DO UPDATE SET
  password_hash = EXCLUDED.password_hash,
  first_name = EXCLUDED.first_name,
  last_name = EXCLUDED.last_name,
  email_verified = EXCLUDED.email_verified,
  is_active = EXCLUDED.is_active,
  updated_at = NOW();

-- Assign 'user' role to all non-admin users (handle duplicates)
INSERT INTO public.user_roles (user_id, role_id, organization_id, granted_by, is_active, granted_at)
SELECT
  u.user_id,
  r.role_id,
  NULL, -- System-wide role
  (SELECT user_id FROM users WHERE email = 'admin@bendcare.com' LIMIT 1), -- Granted by super admin
  true,
  NOW()
FROM users u
CROSS JOIN roles r
WHERE u.email != 'admin@bendcare.com'
  AND r.name = 'user'
  AND NOT EXISTS (
    SELECT 1 FROM user_roles ur2
    WHERE ur2.user_id = u.user_id
      AND ur2.role_id = r.role_id
      AND ur2.organization_id IS NULL
  );

-- Display summary
SELECT 'RBAC Seed Data Summary:' AS info;
SELECT COUNT(*) AS permission_count FROM permissions;
SELECT COUNT(*) AS role_count FROM roles;
SELECT COUNT(*) AS organization_count FROM organizations;
SELECT COUNT(*) AS role_permission_count FROM role_permissions;
SELECT COUNT(*) AS user_count FROM users;
SELECT COUNT(*) AS user_role_count FROM user_roles;

SELECT 'Available Roles:' AS info;
SELECT name, description, is_system_role FROM roles ORDER BY is_system_role DESC, name;

SELECT 'Role Permission Summary:' AS info;
SELECT
  r.name AS role_name,
  COUNT(rp.permission_id) AS permission_count,
  STRING_AGG(p.name, ', ') AS permissions
FROM roles r
LEFT JOIN role_permissions rp ON r.role_id = rp.role_id
LEFT JOIN permissions p ON rp.permission_id = p.permission_id
GROUP BY r.role_id, r.name
ORDER BY r.is_system_role DESC, r.name;

SELECT 'User Role Assignments:' AS info;
SELECT
  u.email,
  r.name AS role_name,
  ur.is_active
FROM users u
JOIN user_roles ur ON u.user_id = ur.user_id
JOIN roles r ON ur.role_id = r.role_id
ORDER BY u.email;

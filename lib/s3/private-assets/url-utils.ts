import { getBucketName } from './client';

/**
 * Extract S3 key from a presigned URL
 * 
 * Parses the S3 key from presigned URLs generated by this service.
 * Useful for validation, logging, and debugging.
 * 
 * @param url - Presigned URL (upload or download)
 * @returns S3 key or null if not a valid presigned URL
 * 
 * @example
 * const url = 'https://bcos-private.s3.amazonaws.com/work-items/abc/doc.pdf?X-Amz-Algorithm=...';
 * const key = extractS3Key(url);
 * // => 'work-items/abc/doc.pdf'
 * 
 * @example
 * const url = 'https://example.com/not-s3-url';
 * const key = extractS3Key(url);
 * // => null
 */
export function extractS3Key(url: string): string | null {
  try {
    const bucket = getBucketName();
    const parsedUrl = new URL(url);

    // Pattern 1: bucket.s3.amazonaws.com/key
    if (parsedUrl.hostname === `${bucket}.s3.amazonaws.com`) {
      return decodeURIComponent(parsedUrl.pathname.replace(/^\//, ''));
    }

    // Pattern 2: bucket.s3.region.amazonaws.com/key
    if (parsedUrl.hostname.startsWith(`${bucket}.s3.`) && parsedUrl.hostname.endsWith('.amazonaws.com')) {
      return decodeURIComponent(parsedUrl.pathname.replace(/^\//, ''));
    }

    // Pattern 3: s3.amazonaws.com/bucket/key
    if (parsedUrl.hostname === 's3.amazonaws.com' && parsedUrl.pathname.startsWith(`/${bucket}/`)) {
      return decodeURIComponent(parsedUrl.pathname.replace(`/${bucket}/`, ''));
    }

    // Pattern 4: s3.region.amazonaws.com/bucket/key
    if (parsedUrl.hostname.startsWith('s3.') && parsedUrl.hostname.endsWith('.amazonaws.com')) {
      const pathMatch = parsedUrl.pathname.match(new RegExp(`^/${bucket}/(.+)`));
      if (pathMatch?.[1]) {
        return decodeURIComponent(pathMatch[1]);
      }
    }

    return null;
  } catch {
    // Invalid URL or bucket not configured
    return null;
  }
}

/**
 * Check if a URL is a presigned S3 URL
 * 
 * Validates that the URL contains S3 presigning parameters.
 * 
 * @param url - URL to check
 * @returns True if URL is a presigned S3 URL
 * 
 * @example
 * const url = 'https://bucket.s3.amazonaws.com/key?X-Amz-Algorithm=AWS4-HMAC-SHA256&...';
 * isPresignedUrl(url);
 * // => true
 * 
 * @example
 * const url = 'https://example.com/file.pdf';
 * isPresignedUrl(url);
 * // => false
 */
export function isPresignedUrl(url: string): boolean {
  try {
    const parsedUrl = new URL(url);

    // Check for AWS signature parameters
    const hasAlgorithm = parsedUrl.searchParams.has('X-Amz-Algorithm');
    const hasCredential = parsedUrl.searchParams.has('X-Amz-Credential');
    const hasSignature = parsedUrl.searchParams.has('X-Amz-Signature');
    const hasDate = parsedUrl.searchParams.has('X-Amz-Date');
    const hasExpires = parsedUrl.searchParams.has('X-Amz-Expires');

    // Must have all required presigning parameters
    return hasAlgorithm && hasCredential && hasSignature && hasDate && hasExpires;
  } catch {
    return false;
  }
}

/**
 * Check if a presigned URL is expired
 * 
 * Validates the expiration time based on X-Amz-Date and X-Amz-Expires parameters.
 * Note: This checks the theoretical expiration, not whether S3 will accept it.
 * S3 may reject URLs before expiration for other reasons (invalid signature, bucket policy, etc.)
 * 
 * @param url - Presigned URL to check
 * @returns True if URL is expired or expiration cannot be determined
 * 
 * @example
 * const url = generateDownloadUrl(...); // Generated 20 minutes ago with 15 min expiration
 * isExpired(url);
 * // => true
 * 
 * @example
 * const url = generateDownloadUrl(...); // Generated 5 minutes ago with 15 min expiration
 * isExpired(url);
 * // => false
 */
export function isExpired(url: string): boolean {
  try {
    const parsedUrl = new URL(url);

    const dateParam = parsedUrl.searchParams.get('X-Amz-Date');
    const expiresParam = parsedUrl.searchParams.get('X-Amz-Expires');

    if (!dateParam || !expiresParam) {
      // Cannot determine expiration - consider expired for safety
      return true;
    }

    // Parse X-Amz-Date (format: YYYYMMDDTHHMMSSZ)
    const year = Number.parseInt(dateParam.substring(0, 4), 10);
    const month = Number.parseInt(dateParam.substring(4, 6), 10) - 1; // Month is 0-indexed
    const day = Number.parseInt(dateParam.substring(6, 8), 10);
    const hour = Number.parseInt(dateParam.substring(9, 11), 10);
    const minute = Number.parseInt(dateParam.substring(11, 13), 10);
    const second = Number.parseInt(dateParam.substring(13, 15), 10);

    const signedDate = new Date(Date.UTC(year, month, day, hour, minute, second));
    const expiresIn = Number.parseInt(expiresParam, 10);

    const expirationTime = signedDate.getTime() + expiresIn * 1000;
    const now = Date.now();

    return now >= expirationTime;
  } catch {
    // Error parsing URL or dates - consider expired for safety
    return true;
  }
}

/**
 * Get expiration timestamp from a presigned URL
 * 
 * Extracts the exact expiration time from the URL parameters.
 * 
 * @param url - Presigned URL
 * @returns Unix timestamp in milliseconds when URL expires, or null if cannot be determined
 * 
 * @example
 * const url = generateDownloadUrl(...);
 * const expiresAt = getExpirationTime(url);
 * console.log(`URL expires at: ${new Date(expiresAt).toISOString()}`);
 * 
 * @example
 * const url = generateDownloadUrl(...);
 * const expiresAt = getExpirationTime(url);
 * const minutesRemaining = Math.floor((expiresAt - Date.now()) / 1000 / 60);
 * console.log(`${minutesRemaining} minutes remaining`);
 */
export function getExpirationTime(url: string): number | null {
  try {
    const parsedUrl = new URL(url);

    const dateParam = parsedUrl.searchParams.get('X-Amz-Date');
    const expiresParam = parsedUrl.searchParams.get('X-Amz-Expires');

    if (!dateParam || !expiresParam) {
      return null;
    }

    // Parse X-Amz-Date (format: YYYYMMDDTHHMMSSZ)
    const year = Number.parseInt(dateParam.substring(0, 4), 10);
    const month = Number.parseInt(dateParam.substring(4, 6), 10) - 1;
    const day = Number.parseInt(dateParam.substring(6, 8), 10);
    const hour = Number.parseInt(dateParam.substring(9, 11), 10);
    const minute = Number.parseInt(dateParam.substring(11, 13), 10);
    const second = Number.parseInt(dateParam.substring(13, 15), 10);

    const signedDate = new Date(Date.UTC(year, month, day, hour, minute, second));
    const expiresIn = Number.parseInt(expiresParam, 10);

    return signedDate.getTime() + expiresIn * 1000;
  } catch {
    return null;
  }
}


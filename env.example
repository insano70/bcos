# ======================
# ENVIRONMENT CONFIGURATION
# ======================

# Environment (development, production, test)
NODE_ENV=development

# ======================
# DATABASE
# ======================

# PostgreSQL connection string
# Development: Use local PostgreSQL instance
# Production: Use managed database service with connection pooling
DATABASE_URL=postgresql://username:password@localhost:5432/database_name

# Analytics Database (External)
# Connection to external analytics database containing ih.gr_app_measures table
ANALYTICS_DATABASE_URL=postgresql://username:password@analytics-host:5432/analytics_db

# ======================
# AUTHENTICATION & SECURITY
# ======================

# JWT signing secrets - MUST be cryptographically secure
# Generate with: openssl rand -hex 64
# CRITICAL: Use different secrets for each environment
JWT_SECRET=your-super-secure-64-character-hex-string-here-generate-with-openssl-rand-hex-32
JWT_REFRESH_SECRET=your-super-secure-64-character-hex-refresh-string-different-from-above

# CSRF protection secret - Used for signing anonymous CSRF tokens
# Generate with: openssl rand -hex 32
# CRITICAL: Must be kept secret and unique per environment
CSRF_SECRET=your-csrf-secret-32-character-hex-string-generate-with-openssl-rand-hex-32

# ======================
# APPLICATION
# ======================

# Public URL for the application
# Development: http://localhost:4001
# Production: https://yourdomain.com (MUST be HTTPS)
NEXT_PUBLIC_APP_URL=http://localhost:4001

# Application port (optional, defaults to 3000 for container compatibility)
PORT=3000

# ======================
# EMAIL SERVICE - AWS SES
# ======================

# AWS SES SMTP Configuration
# Get these from AWS SES console -> SMTP settings
SMTP_USERNAME=your-ses-smtp-username
SMTP_PASSWORD=your-ses-smtp-password

# Email addresses (must be verified in AWS SES)
SMTP_FROM_EMAIL=noreply@yourdomain.com
SMTP_FROM_NAME="Your Company Name"
SMTP_REPLY_TO=noreply@yourdomain.com

# AWS Region (uses existing AWS_REGION if available, defaults to us-east-1)
# SMTP endpoint is automatically constructed as email-smtp.{region}.amazonaws.com
# SMTP ports are hardcoded: STARTTLS=587, TLS=465
AWS_REGION=us-east-1

# Admin notification emails (comma-separated)
# These receive security alerts and system notifications
ADMIN_NOTIFICATION_EMAILS=admin@yourdomain.com,security@yourdomain.com

# ======================
# EXTERNAL SERVICES (Optional)
# ======================

# Stripe webhook secret for payment processing
# Get from Stripe Dashboard > Webhooks > Signing secret
STRIPE_WEBHOOK_SECRET=whsec_your_stripe_webhook_secret

# AWS SES webhook secret for email event tracking (if using SNS notifications)
# SES_WEBHOOK_SECRET=your_ses_webhook_secret

# CDN/Storage domain for images (optional)
# Example: https://cdn.yourdomain.com
NEXT_PUBLIC_STORAGE_DOMAIN=

# ======================
# SAML SSO CONFIGURATION (Optional)
# ======================

# Enable SAML SSO with Microsoft Entra ID
# If these are not set, traditional email/password login is the only option

# Microsoft Entra Tenant ID (UUID format)
# Get from: Azure Portal > Entra ID > Overview > Tenant ID
ENTRA_TENANT_ID=

# Microsoft Entra Entry Point (auto-generated from tenant ID)
# Format: https://login.microsoftonline.com/{TENANT_ID}/saml2
ENTRA_ENTRY_POINT=

# Microsoft Entra Issuer (auto-generated from tenant ID)
# Format: https://sts.windows.net/{TENANT_ID}/
ENTRA_ISSUER=

# Entra's public certificate for SAML signature validation
# Path to PEM file OR certificate content
# Download from: Azure Portal > Your Enterprise App > Single sign-on > SAML Certificates > Certificate (Base64)
ENTRA_CERT=./certs/entra-cert.pem

# Service Provider (Your App) Configuration
# Entity ID that identifies your application to Entra
# Development: http://localhost:4001/saml/metadata
# Production: https://app.bendcare.com/saml/metadata
SAML_ISSUER=

# Callback URL where Entra sends SAML responses
# Development: http://localhost:4001/api/auth/saml/callback
# Production: https://app.bendcare.com/api/auth/saml/callback
SAML_CALLBACK_URL=

# Service Provider certificate (optional - for signing requests)
# Path to PEM file OR certificate content
# Generate with: openssl req -x509 -newkey rsa:4096 -keyout certs/saml-key.pem -out certs/saml-cert.pem -nodes -days 730
SAML_CERT=./certs/saml-cert.pem
SAML_PRIVATE_KEY=./certs/saml-key.pem

# Security Configuration
# Comma-separated list of allowed email domains
SAML_ALLOWED_EMAIL_DOMAINS=bendcare.com

# Days before certificate expiration to warn (default: 30)
SAML_CERT_EXPIRY_WARNING_DAYS=30

# SAML callback rate limit (requests per minute per IP)
# Development: 10, Staging: 20, Production: 50
SAML_CALLBACK_RATE_LIMIT=10

# Log raw SAML responses for debugging (true/false)
# SECURITY: Only enable in development/staging, NEVER in production
SAML_LOG_RAW_RESPONSES=false

# Redirect URL after successful SAML authentication
SAML_SUCCESS_REDIRECT=/dashboard

# ======================
# SECURITY NOTES
# ======================

# 1. NEVER commit this file to version control
# 2. Use different secrets for each environment
# 3. Rotate secrets regularly (quarterly recommended)
# 4. Use a secrets manager in production (AWS Secrets Manager, HashiCorp Vault, etc.)
# 5. Ensure DATABASE_URL uses SSL in production (?sslmode=require)
# 6. Consider using IAM authentication for managed databases

# ======================
# QUICK SETUP COMMANDS
# ======================

# Generate JWT secrets:
# openssl rand -hex 64

# Create local PostgreSQL database:
# createdb your_database_name

# Test database connection:
# psql $DATABASE_URL -c "SELECT version();"


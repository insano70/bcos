name: Deploy Application

on:
  push:
    branches: [staging]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      branch:
        description: 'Branch to deploy (leave empty for current branch)'
        required: false
        type: string
      force_deploy:
        description: 'Force deployment even if checks fail'
        required: false
        default: 'false'
        type: boolean

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: bcos

concurrency:
  group: staging-deployment-${{ github.ref }}
  cancel-in-progress: false

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  # Security scan and tests removed for fast staging deployments
  # Run security scans and tests locally before pushing to staging
  # OIDC trust policy updated with permissive conditions for insano70/bcos repository

  # Build and Deploy
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'staging' }}
    if: ${{ !failure() || github.event.inputs.force_deploy == 'true' }}
    timeout-minutes: 20
    steps:
      - name: Set deployment variables
        id: vars
        run: |
          # Determine target environment
          if [ "${{ github.event.inputs.environment }}" = "production" ]; then
            echo "TARGET_ENV=production" >> $GITHUB_OUTPUT
            echo "ECS_SERVICE=bcos-production-service" >> $GITHUB_OUTPUT
            echo "ECS_CLUSTER=bcos-production-cluster" >> $GITHUB_OUTPUT
            echo "ECS_TASK_DEFINITION=bcos-production" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=production-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "TARGET_ENV=staging" >> $GITHUB_OUTPUT
            echo "ECS_SERVICE=bcos-staging-service" >> $GITHUB_OUTPUT
            echo "ECS_CLUSTER=bcos-staging-cluster" >> $GITHUB_OUTPUT
            echo "ECS_TASK_DEFINITION=bcos-staging" >> $GITHUB_OUTPUT
            echo "IMAGE_TAG=staging-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi
          
          # Determine branch to deploy
          if [ -n "${{ github.event.inputs.branch }}" ]; then
            echo "DEPLOY_BRANCH=${{ github.event.inputs.branch }}" >> $GITHUB_OUTPUT
          else
            echo "DEPLOY_BRANCH=${{ github.ref_name }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout code
        uses: actions/checkout@f43a0e5ff2bd294095638e18286ca9a3d1956744
        with:
          ref: ${{ steps.vars.outputs.DEPLOY_BRANCH }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@e3dd6a429d7300a6a4c196c26e071d42e0343502 # v4.0.1
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/BCOS-GitHubActionsDeploymentRole
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: GitHubActions-${{ steps.vars.outputs.TARGET_ENV }}-${{ github.run_number }}
          mask-aws-account-id: false

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@818d4b7b91585d195f67373fd9cb0332e31a7175 # v4.6.0
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=raw,value=${{ steps.vars.outputs.IMAGE_TAG }}
            type=raw,value=${{ steps.vars.outputs.TARGET_ENV }}-latest

      - name: Build and push container image
        id: build-image
        uses: docker/build-push-action@2eb1c1961a95fc15694676618e422e8ba1d63825 # v4.1.1
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            NODE_ENV=production
            NEXT_TELEMETRY_DISABLED=1
            BUILD_VERSION=${{ steps.vars.outputs.IMAGE_TAG }}
          platforms: linux/amd64


      - name: Get current task definition (or create empty one)
        run: |
          if aws ecs describe-task-definition --task-definition ${{ steps.vars.outputs.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json 2>/dev/null; then
            echo "✅ Existing task definition found"
          else
            echo "⚠️ No existing task definition found, creating minimal one"
            # Create minimal task definition JSON for first deployment
            cat > task-definition.json << EOF
          {
            "family": "${{ steps.vars.outputs.ECS_TASK_DEFINITION }}",
            "networkMode": "awsvpc",
            "requiresCompatibilities": ["FARGATE"],
            "cpu": "256",
            "memory": "512",
            "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/BCOS-ECSTaskExecutionRole",
            "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/BCOS-ECSTaskRole",
            "containerDefinitions": [
              {
                "name": "bcos",
                "image": "placeholder:latest",
                "portMappings": [
                  {
                    "containerPort": 3000,
                    "hostPort": 3000,
                    "protocol": "tcp",
                    "name": "http"
                  }
                ],
                "essential": true,
                "logConfiguration": {
                  "logDriver": "awslogs",
                  "options": {
                    "awslogs-group": "/ecs/bcos-${{ steps.vars.outputs.TARGET_ENV }}",
                    "awslogs-region": "${{ env.AWS_REGION }}",
                    "awslogs-stream-prefix": "ecs"
                  }
                }
              }
            ]
          }
          EOF
          fi

      - name: Update ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@4225e0b507142a2e432b018bc3ccb728559b437a # v1.2.0
        with:
          task-definition: task-definition.json
          container-name: bcos
          image: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ steps.vars.outputs.IMAGE_TAG }}

      - name: Ensure CloudWatch log group exists
        run: |
          LOG_GROUP="/ecs/bcos-${{ steps.vars.outputs.TARGET_ENV }}"
          if ! aws logs describe-log-groups --log-group-name-prefix "${LOG_GROUP}" --query 'logGroups[?logGroupName==`'${LOG_GROUP}'`]' --output text | grep -q "${LOG_GROUP}"; then
            echo "Creating log group: ${LOG_GROUP}"
            aws logs create-log-group --log-group-name "${LOG_GROUP}"
            aws logs put-retention-policy --log-group-name "${LOG_GROUP}" --retention-in-days 30
          else
            echo "✅ Log group already exists: ${LOG_GROUP}"
          fi

      - name: Register task definition
        id: register-task-def
        run: |
          # Register the task definition to get the full ARN
          TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://${{ steps.task-def.outputs.task-definition }} --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "task-definition-arn=${TASK_DEF_ARN}" >> $GITHUB_OUTPUT
          echo "✅ Task definition registered: ${TASK_DEF_ARN}"

      - name: Check if ECS service exists
        id: check-service
        run: |
          if aws ecs describe-services --cluster ${{ steps.vars.outputs.ECS_CLUSTER }} --services ${{ steps.vars.outputs.ECS_SERVICE }} --query 'services[0].serviceName' --output text 2>/dev/null; then
            echo "service-exists=true" >> $GITHUB_OUTPUT
          else
            echo "service-exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Create ECS service (if it doesn't exist)
        if: steps.check-service.outputs.service-exists == 'false'
        run: |
          # Get target group ARN from CDK stack outputs
          TARGET_GROUP_ARN=$(aws cloudformation describe-stacks --stack-name BCOS-StagingStack --query 'Stacks[0].Outputs[?OutputKey==`StagingTargetGroupArn`].OutputValue' --output text)
          
          # Create ECS service with proper load balancer configuration
          aws ecs create-service \
            --cluster ${{ steps.vars.outputs.ECS_CLUSTER }} \
            --service-name ${{ steps.vars.outputs.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }} \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-1d132031,subnet-6f277e63,subnet-095fa406c94abb01f,subnet-2563a41a],securityGroups=[sg-01fa0ee93963bd614],assignPublicIp=DISABLED}" \
            --load-balancers "targetGroupArn=${TARGET_GROUP_ARN},containerName=bcos,containerPort=3000" \
            --health-check-grace-period-seconds 300 \
            --deployment-configuration "maximumPercent=200,minimumHealthyPercent=50" \
            --enable-execute-command
          
          echo "✅ ECS service created successfully"

      - name: Deploy to ECS
        run: |
          # Update existing service to use new task definition
          aws ecs update-service \
            --cluster ${{ steps.vars.outputs.ECS_CLUSTER }} \
            --service ${{ steps.vars.outputs.ECS_SERVICE }} \
            --task-definition ${{ steps.register-task-def.outputs.task-definition-arn }}
          
          # Wait for service stability
          echo "⏳ Waiting for service to reach steady state..."
          aws ecs wait services-stable \
            --cluster ${{ steps.vars.outputs.ECS_CLUSTER }} \
            --services ${{ steps.vars.outputs.ECS_SERVICE }}
          
          echo "✅ ECS deployment completed successfully"

      - name: Verify deployment
        run: |
          # Wait for deployment to complete
          sleep 60
          
          # Set health check URL based on environment
          if [ "${{ steps.vars.outputs.TARGET_ENV }}" = "production" ]; then
            HEALTH_URL="https://app.bendcare.com/health"
            APP_URL="https://app.bendcare.com"
          else
            HEALTH_URL="https://staging.bendcare.com/health"
            APP_URL="https://staging.bendcare.com"
          fi
          
          # Health check
          RESPONSE=$(curl -s -o /dev/null -w "%{http_code}" $HEALTH_URL)
          if [ "$RESPONSE" -eq 200 ]; then
            echo "✅ ${{ steps.vars.outputs.TARGET_ENV }} deployment successful - Health check passed"
          else
            echo "❌ ${{ steps.vars.outputs.TARGET_ENV }} deployment failed - Health check returned: $RESPONSE"
            exit 1
          fi

      - name: Update deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ ${{ steps.vars.outputs.TARGET_ENV }} deployment completed successfully"
            if [ "${{ steps.vars.outputs.TARGET_ENV }}" = "production" ]; then
              echo "🌐 Application URL: https://app.bendcare.com"
              echo "📊 Monitoring: https://console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#dashboards:name=BCOS-production-Dashboard"
            else
              echo "🌐 Application URL: https://staging.bendcare.com"
              echo "📊 Monitoring: https://console.aws.amazon.com/cloudwatch/home?region=${{ env.AWS_REGION }}#dashboards:name=BCOS-staging-Dashboard"
            fi
          else
            echo "❌ ${{ steps.vars.outputs.TARGET_ENV }} deployment failed"
            echo "🔍 Check logs: https://console.aws.amazon.com/ecs/home?region=${{ env.AWS_REGION }}#/clusters/${{ steps.vars.outputs.ECS_CLUSTER }}/services/${{ steps.vars.outputs.ECS_SERVICE }}/logs"
          fi
